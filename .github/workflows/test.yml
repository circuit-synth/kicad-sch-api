name: Tests

on:
  push:
    branches: [ main, develop, v1-development ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        cd python
        uv pip install -e .[dev]

    - name: Lint with flake8
      run: |
        cd python
        uv run flake8 kicad_sch_api/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Type check with mypy
      run: |
        cd python
        uv run mypy kicad_sch_api/ --ignore-missing-imports

    - name: Test with pytest
      run: |
        cd python
        uv run pytest tests/ -v --cov=kicad_sch_api --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./python/coverage.xml
        flags: unittests
        name: codecov-umbrella

  mcp-server-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mcp-server/package-lock.json

    - name: Install MCP server dependencies
      run: |
        cd mcp-server
        npm ci

    - name: Build MCP server
      run: |
        cd mcp-server
        npm run build

    - name: Test MCP server
      run: |
        cd mcp-server
        npm test

  format-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        cd python
        uv pip install -e .[dev]

    - name: Check code formatting
      run: |
        cd python
        uv run black --check kicad_sch_api/ tests/
        uv run isort --check-only kicad_sch_api/ tests/

  integration-test:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        cd python
        uv pip install -e .

    - name: Integration test - Basic API
      run: |
        cd python
        uv run python -c "
        import kicad_sch_api as ksa
        sch = ksa.create_schematic('CI Test')
        comp = sch.components.add('Device:R', 'R1', '10k', (100, 50))
        comp.set_property('MPN', 'TEST-PART')
        print(f'✅ Integration test passed: {comp.reference} = {comp.value}')
        print(f'✅ Components: {len(sch.components)}')
        print(f'✅ Properties: {comp.get_property(\"MPN\")}')
        "

    - name: Integration test - Reference schematics
      run: |
        cd python
        # Test parsing reference schematics if they exist
        if [ -d "tests/reference_kicad_projects" ]; then
          uv run pytest tests/reference_kicad_projects/ -v --tb=short
        else
          echo "No reference schematics found"
        fi